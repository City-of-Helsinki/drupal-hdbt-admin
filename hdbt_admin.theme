<?php

/**
 * @file
 * Contains HDBT Admin theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_preprocess().
 */
function hdbt_admin_preprocess(&$variables) {
  $language = Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  $variables['current_langcode'] = $language->getId();
  $variables['current_language'] = $language->getName();
}

/**
 * Implements hook_preprocess_input().
 */
function hdbt_admin_preprocess_input(&$variables) {
  if ($variables['element']['#type'] !== 'submit') {
    return;
  }

  if (str_contains($variables['element']['#name'], 'field_hero')) {
    if (array_key_exists('#paragraphs_mode', $variables['element'])) {
      $variables['#attached']['library'][] = 'hdbt_admin/hero-toggle';
      $variables['hdbt_selector'] = 'field-hero-action--' . $variables['element']['#paragraphs_mode'];
    }
    elseif ($variables['element']['#name'] === 'field_hero_hero_add_more') {
      $variables['#attached']['library'][] = 'hdbt_admin/hero-toggle';
      $variables['hdbt_selector'] = 'field-hero-action--add';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_admin_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (
    array_key_exists('#parents', $variables['element']) &&
    is_array($variables['element']['#parents']) &&
    $variables['theme_hook_original'] == 'form_element'
  ) {
    _hdbt_admin_form_template_suggestions($suggestions, $variables);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_admin_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (
    array_key_exists('#parents', $variables['element']) &&
    is_array($variables['element']['#parents']) &&
    $variables['theme_hook_original'] == 'input__radio'
  ) {
    _hdbt_admin_form_template_suggestions($suggestions, $variables);
  }
}

/**
 * Helper function for applying template suggestions.
 *
 * @param array $suggestions
 *   Existing suggestions.
 * @param array $variables
 *   Variables array.
 */
function _hdbt_admin_form_template_suggestions(array &$suggestions, array &$variables) {
  if (in_array('theme_color', $variables['element']['#parents'], TRUE)) {
    $suggestions[] = $variables['theme_hook_original'] . '__theme_color';
  }
  if (in_array('default_icon', $variables['element']['#parents'], TRUE)) {
    $suggestions[] = $variables['theme_hook_original'] . '__default_icon';
  }
  if (in_array('koro', $variables['element']['#parents'], TRUE)) {
    $suggestions[] = $variables['theme_hook_original'] . '__koro';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_admin_preprocess_html(&$variables) {
  $variables['attributes']['class'][] = 'hdbt-admin';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_admin_preprocess_table(&$variables) {
  // Add table field ID as a class as well. Remove the possible temp value from
  // the ID before adding it as a class.
  if (
    array_key_exists('id', $variables['attributes']) &&
    array_key_exists('class', $variables['attributes']) &&
    is_array($variables['attributes']['class'])
  ) {
    $class = explode('--', $variables['attributes']['id']);
    $variables['attributes']['class'][] = reset($class);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter meta information field visibility by moving the fiels in to
 * Meta information accordion.
 */
function hdbt_admin_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Apply sidebar changes to node forms.
  hdbt_admin_apply_form_theme($form);

  // Get current entity.
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  // Disable "Preview" button on new nodes.
  if ($node->isNew()) {
    $form['gin_actions']['actions']['preview']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_tpr_unit_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_tpr_service_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_tpr_service_channel_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_tpr_errand_service_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_tpr_ontology_word_details_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_form_taxonomy_term_form_alter(&$form) {
  hdbt_admin_apply_form_theme($form);
}

/**
 * Apply Gin like feel to custom entity forms.
 *
 * @param array $form
 *   Form.
 */
function hdbt_admin_apply_form_theme(array &$form) {

  // TPR Entities.
  $tpr_entities = [
    'tpr_unit',
    'tpr_service',
    'tpr_service_channel',
    'tpr_errand_service',
    'tpr_ontology_word_details',
  ];

  // Handle TPR entities.
  if (
    isset($form['#entity_type']) &&
    in_array($form['#entity_type'], $tpr_entities)
  ) {

    // Create artificial status group.
    $form['gin_actions']['tpr_entity_status'] = [
      '#type' => 'container',
      '#weight' => 0,
      '#attributes' => [
        'class' => [
          'tpr-entity-status',
        ],
      ],
    ];

    // Remove the disabled value even if there's only one translation, despite
    // what is stated in ContentTranslationHandler.php#455.
    $form['content_translation']['status']['#disabled'] = FALSE;

    // Add content translation status gin_sticky actions.
    $form['gin_actions']['actions']['preview'] = ($form['actions']['preview']) ?? [];
    $form['gin_actions']['actions']['status'] = ($form['content_translation']['status']) ?? [];
    $form['gin_actions']['actions']['status']['#attributes']['class'][] = 'tpr-entity-status';

    // Move content translation fields to author information.
    $form['author_information']['uid'] = ($form['content_translation']['uid']) ?? [];
    $form['author_information']['created'] = ($form['content_translation']['created']) ?? [];
    $form['author_information']['uid']['#group'] = 'author_information';
    $form['author_information']['created']['#group'] = 'author_information';

    // Create revision by default.
    $form['revision']['#default_value'] = TRUE;
    $form['#attached']['library'][] = 'hdbt_admin/tpr-edit-form';
  }

  // Handle Taxonomy terms.
  if (
    isset($form['#entity_type']) &&
    $form['#entity_type'] === 'taxonomy_term'
  ) {
    // Move taxonomy term overview button to sidebar.
    $form['gin_sidebar']['actions']['overview'] = ($form['actions']['overview']) ?? [];
    $form['gin_sidebar']['actions']['overview']['#weight'] = 0;
    unset($form['gin_actions']['actions']['overview']);
  }

  // Alter submit button label to exclude "(this translation)" and move the
  // button to last.
  if (isset($form['gin_actions']['actions']['submit'])) {
    $form['gin_actions']['actions']['submit']['#value'] = t('Save');
    $form['gin_actions']['actions']['submit']['#weight'] = '99';
  }

  // Move unlock button right before submit.
  if (isset($form['actions']['unlock'])) {
    $form['gin_actions']['actions']['unlock']['#weight'] = '98';
  }

  // Move the promoted to front page checkbox to more
  // prominent part of the page.
  if (
    isset($form['promote']) &&
    array_key_exists('#should_move', $form['promote']) &&
    $form['promote']['#should_move']
  ) {
    $form['admin_promote'] = [
      '#group' => 'advanced',
      '#weight' => -10,
      '#access' => TRUE,
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'entity-meta__header',
          'entity-meta__promote',
        ],
      ],
      'admin_promote_label' => [
        '#access' => TRUE,
        '#title' => $form['promote']['widget']['#title'],
        '#type' => 'item',
      ],
    ];
    $form['promote']['#group'] = 'admin_promote';
  }

  $meta_fields = [
    'field_short_title' => 1,
    'color_palette' => 1,
    'field_liftup_image' => 2,
    'field_metatags' => 2,
    'simple_sitemap' => 10,
  ];

  // Create a new field group for meta information,
  // if any of the meta data fields are available.
  foreach ($meta_fields as $field => $weight) {
    if (isset($form[$field])) {
      if (!array_key_exists('admin_metainformation', $form)) {
        $form['admin_metainformation'] = [
          '#title' => t('Meta information'),
          '#group' => 'advanced',
          '#weight' => -10,
          '#access' => TRUE,
          '#type' => 'details',
          '#open' => TRUE,
        ];
      }

      $form[$field]['#group'] = 'admin_metainformation';
      $form[$field]['#weight'] = $weight;
    }
  }

  // Hide the content translation detail group from prying eyes.
  $form['content_translation']['#attributes']['class'][] = 'is-hidden';

  // Manipulate metatags field according to clients needs.
  hdbt_admin_manipulate_field_metatags($form);

  // Manipulate custom fields.
  hdbt_admin_manipulate_custom_fields($form);
}

/**
 * Manipulate metatags field according to clients needs.
 *
 * @param array $form
 *   Form to be handled.
 */
function hdbt_admin_manipulate_field_metatags(array &$form) {

  if (!isset($form['field_metatags']['widget'][0])) {
    return;
  }

  $metatags = &$form['field_metatags']['widget'][0];

  // Open Meta tags and close Open Graph and Twitter cards by default.
  $metatags['#open'] = TRUE;
  $metatags['open_graph']['#open'] = FALSE;
  $metatags['twitter_cards']['#open'] = FALSE;

  // Use custom label for the Title meta tag field and set the field required.
  if (isset($metatags['basic']['title'])) {
    $metatags['basic']['title']['#title'] = t('Page title', [], ['context' => 'HELfi Metatags']);
    $metatags['basic']['title']['#required'] = TRUE;
  }

  // Use custom label for the Description meta tag field
  // and set the field required.
  if (isset($metatags['basic']['description'])) {
    $metatags['basic']['description']['#title'] = t('Description', [], ['context' => 'HELfi Metatags']);
    $metatags['basic']['description']['#required'] = TRUE;
  }

  // Hide abstract and keywords fields from the form.
  foreach (['abstract', 'keywords'] as $obsolete_field) {
    if (isset($metatags['basic'][$obsolete_field])) {
      $metatags['basic'][$obsolete_field]['#access'] = FALSE;
    }
  }
}

/**
 * Manipulate custom fields in entity edit forms.
 *
 * @param array $form
 *   Form to be handled.
 */
function hdbt_admin_manipulate_custom_fields(array &$form) {
  // If hide_sidebar_navigation field exists, move it under menu details.
  if (array_key_exists('hide_sidebar_navigation', $form)) {
    $form['hide_sidebar_navigation']['#weight'] = -10;
    $form['hide_sidebar_navigation']['#states'] = [
      'visible' => [
        ':input[name="menu[enabled]"]' => ['checked' => TRUE],
      ],
    ];
    $form['menu']['link']['hide_sidebar_navigation'] = $form['hide_sidebar_navigation'];
    $form['hide_sidebar_navigation']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_admin_preprocess_media(&$variables) {
  if (
    isset($variables['media']) &&
    $variables['media'] instanceof MediaInterface &&
    $variables['media']->bundle() === 'image'
  ) {
    $current_language = $variables['current_langcode'];
    $route = \Drupal::routeMatch();
    if (!empty($route->getParameter('target'))) {
      $current_language = $route->getParameter('target')->getId();
    }

    if ($variables['media']->hasTranslation($current_language)) {
      $alt = $variables['media']
        ->getTranslation($current_language)->field_media_image->alt;
      $variables['alt_text'] = $alt !== '""' ? $alt : FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function hdbt_admin_preprocess_page(&$variables) {
  $variables['#attached']['drupalSettings']['eu_cookie_compliance']['hide_the_banner'] = TRUE;
}
